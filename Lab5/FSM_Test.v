
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module FSM(

	//////////// CLOCK //////////
	//input 		          		CLOCK_50,
	//input 		          		CLOCK2_50,
	//input 		          		CLOCK3_50,

	//////////// LED //////////
	//output		     [8:0]		LEDG,
	//output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		    [1:0]		KEY, //KEY[0] reset, KEY[1] clock

	//////////// SW //////////
	input 		    [1:0]		SW,//sw[0] --> SequenceInput

	//////////// SEG7 //////////
	output	reg     [6:0]		HEX0,	//NextState[0]
	output	reg     [6:0]		HEX1,	//NextState[1]
	output	reg     [6:0]		HEX2,	//NextState[2]
	//output		     [6:0]		HEX3,
	output	reg		[6:0]		HEX4,	//output reg [5:0] count_z
	output	reg     [6:0]		HEX5,	//output reg [5:0] count_z
	//output		     [6:0]		HEX6,
	output	reg     [6:0]		HEX7	//CountOutput: will show the 0 or 1 values of output 
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	reg CountOutput;
	reg [5:0] count_z;
	reg [2:0] CurrentState, NextState;
	
	integer count_z_dec=0;
	
	parameter Start = 3'b000,
			  First = 3'b001,
			  Second = 3'b011,
			  Third = 3'b010,
			  Delay = 3'b110,
			  SuccessD = 3'b111,
			  Success = 3'b101;


//=======================================================
//  Structural coding
//=======================================================

	always @ (posedge KEY[1]) begin 
		if (KEY[0])
			CurrentState <= Start;
			else 
			CurrentState <= NextState;
	end
	
	
	always @ (CurrentState or SW[1]) begin
		case(CurrentState)
			Start : begin 
				if (SW[1]) NextState = Start;
				else NextState = First;
			end 
		
			First : begin 
				if (SW[1]) NextState = Second;
				else NextState = First;
			end 
			
			Second : begin 
				if (SW[1]) NextState = Third;
				else NextState = First; 
				end 
				
			Third : begin 
				if (SW[1]) NextState = Success;
				else NextState = Delay;
			end
			
			Delay : begin
				if (SW[1]) NextState = SuccessD;
				else NextState = Delay;
			end 
			
			SuccessD : begin 
				if (SW[1]) NextState = Third;
				else NextState = First;
			end 
			
			Success : begin 
				NextState = Start;
				count_z<=count_z+1;
				CountOutput = 1;
			end
		endcase	
	end
	//Output Logic
	
endmodule
